-- Copyright (C) 2022  Intel Corporation. All rights reserved.
-- Your use of Intel Corporation's design tools, logic functions 
-- and other software and tools, and any partner logic 
-- functions, and any output files from any of the foregoing 
-- (including device programming or simulation files), and any 
-- associated documentation or information are expressly subject 
-- to the terms and conditions of the Intel Program License 
-- Subscription Agreement, the Intel Quartus Prime License Agreement,
-- the Intel FPGA IP License Agreement, or other applicable license
-- agreement, including, without limitation, that your use is for
-- the sole purpose of programming logic devices manufactured by
-- Intel and sold by Intel or its authorized distributors.  Please
-- refer to the applicable agreement for further details, at
-- https://fpgasoftware.intel.com/eula.

-- ***************************************************************************
-- This file contains a Vhdl test bench template that is freely editable to   
-- suit user's needs .Comments are provided in each section to help the user  
-- fill out necessary details.                                                
-- ***************************************************************************
-- Generated on "08/31/2024 18:56:45"
                                                            
-- Vhdl Test Bench template for design  :  vk1t2laskin
-- 
-- Simulation tool : Questa Intel FPGA (VHDL)
-- 

LIBRARY ieee;                                               
USE ieee.std_logic_1164.all;                                

ENTITY vk1t2laskin_vhd_tst IS
END vk1t2laskin_vhd_tst;
ARCHITECTURE vk1t2laskin_arch OF vk1t2laskin_vhd_tst IS
-- constants                                                 
-- signals                                                   
SIGNAL LEDR1 : STD_LOGIC;
SIGNAL LEDR2 : STD_LOGIC;
SIGNAL LEDR3 : STD_LOGIC;
SIGNAL LEDR4 : STD_LOGIC;
SIGNAL LEDR5 : STD_LOGIC;
SIGNAL LEDR6 : STD_LOGIC;
SIGNAL LEDR7 : STD_LOGIC;
SIGNAL LEDR8 : STD_LOGIC;
SIGNAL LEDR9 : STD_LOGIC;
SIGNAL sum : STD_LOGIC_VECTOR(4 DOWNTO 0);
SIGNAL SW2 : STD_LOGIC;
SIGNAL SW3 : STD_LOGIC;
SIGNAL SW4 : STD_LOGIC;
SIGNAL SW5 : STD_LOGIC;
SIGNAL SW6 : STD_LOGIC;
SIGNAL SW7 : STD_LOGIC;
SIGNAL SW8 : STD_LOGIC;
SIGNAL SW9 : STD_LOGIC;
SIGNAL xor_out : STD_LOGIC_VECTOR(3 DOWNTO 0);
COMPONENT vk1t2laskin
	PORT (
	LEDR1 : BUFFER STD_LOGIC;
	LEDR2 : BUFFER STD_LOGIC;
	LEDR3 : BUFFER STD_LOGIC;
	LEDR4 : BUFFER STD_LOGIC;
	LEDR5 : BUFFER STD_LOGIC;
	LEDR6 : BUFFER STD_LOGIC;
	LEDR7 : BUFFER STD_LOGIC;
	LEDR8 : BUFFER STD_LOGIC;
	LEDR9 : BUFFER STD_LOGIC;
	sum : BUFFER STD_LOGIC_VECTOR(4 DOWNTO 0);
	SW2 : IN STD_LOGIC;
	SW3 : IN STD_LOGIC;
	SW4 : IN STD_LOGIC;
	SW5 : IN STD_LOGIC;
	SW6 : IN STD_LOGIC;
	SW7 : IN STD_LOGIC;
	SW8 : IN STD_LOGIC;
	SW9 : IN STD_LOGIC;
	xor_out : BUFFER STD_LOGIC_VECTOR(3 DOWNTO 0)
	);
END COMPONENT;
BEGIN
	i1 : vk1t2laskin
	PORT MAP (
-- list connections between master ports and signals
	LEDR1 => LEDR1,
	LEDR2 => LEDR2,
	LEDR3 => LEDR3,
	LEDR4 => LEDR4,
	LEDR5 => LEDR5,
	LEDR6 => LEDR6,
	LEDR7 => LEDR7,
	LEDR8 => LEDR8,
	LEDR9 => LEDR9,
	sum => sum,
	SW2 => SW2,
	SW3 => SW3,
	SW4 => SW4,
	SW5 => SW5,
	SW6 => SW6,
	SW7 => SW7,
	SW8 => SW8,
	SW9 => SW9,
	xor_out => xor_out
	);
init : PROCESS                                               
-- variable declarations                                     
BEGIN                                                        
        -- code that executes only once                      
WAIT;                                                       
END PROCESS init;                                           
always : PROCESS                                              
-- optional sensitivity list                                  
-- (        )                                                 
-- variable declarations                                      
BEGIN                                                         
        -- code executes for every event on sensitivity list  
WAIT;                                                        
END PROCESS always;                                          
END vk1t2laskin_arch;
